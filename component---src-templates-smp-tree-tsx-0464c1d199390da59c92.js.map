{"version":3,"sources":["webpack:///./src/components/graph/LazyGraph.tsx","webpack:///./src/templates/SMPTree.tsx"],"names":["LazyGraph","React","lazy","SMPTreeWrapper","data","smp","characterMetadata","relationships","smpData","name","description","primary_color","componentProps","useMemo","characters","map","cm","character","c","sort","Math","random","value","a","b","title","themeColor","className","IconText","text","toUpperCase","color","window","fallback"],"mappings":"oJAIeA,EAFGC,IAAMC,MAAK,kBAAM,2D,kCC0GpBC,UAhFQ,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,KAAsB,EAIxCA,EAFAC,EAFwC,EAExCA,IAFwC,IAGxCA,IAAOC,EAHiC,EAGjCA,kBAHiC,IAGdC,qBAHc,MAGE,GAHF,EAKvCA,IAAeF,EAAIE,cAAgB,IACxC,IA1B+CC,EAAqB,EAEzDC,EAAMC,EAAaC,EAwBxBC,EAAiBC,mBACnB,iBACK,CACGR,MACAS,WAAYR,EACPS,KAAI,SAACC,GAAD,wBAAiCA,EAAOA,EAAGC,cAC/CF,KAAI,SAACG,GAAD,MAA8B,CAAEC,KAAMC,KAAKC,SAAUC,MAAOJ,MAChEC,MAAK,SAACI,EAAQC,GAAT,OAAoBD,EAAEJ,KAAOK,EAAEL,QACpCJ,KAAI,SAACQ,GAAD,OAAYA,EAAED,SACvBf,cAAeA,UAAiB,MAExC,CAACH,IAEL,OAvCoE,GAArBI,EAuChCI,GArCXP,IAAOI,EAFyD,EAEzDA,KAAMC,EAFmD,EAEnDA,YAAaC,EAFsC,EAEtCA,cAG1B,oCACI,kBAAC,IAAD,CAAKc,MAAOhB,EAAMC,YAAaA,EAAagB,WAAYf,IACxD,yBAAKgB,UAAU,gCACX,kBAACC,EAAA,EAAD,CAAUC,KAAMpB,EAAKqB,cAAeC,MAAOpB,KAE5B,oBAAXqB,QACJ,kBAAC,WAAD,CAAUC,SAAU,MAChB,kBAAC,EAAczB","file":"component---src-templates-smp-tree-tsx-0464c1d199390da59c92.js","sourcesContent":["import React from 'react';\r\n\r\nconst LazyGraph = React.lazy(() => import('./Graph'));\r\n\r\nexport default LazyGraph;\r\n","import { graphql, PageProps } from 'gatsby';\r\nimport React, { Suspense, useMemo } from 'react';\r\nimport LazyGraph from '../components/graph/LazyGraph';\r\nimport SEO from '../components/seo';\r\nimport IconText from '../components/textAndIcons/IconText';\r\nimport { SMPData, CharacterMetadata, CharacterWithContext } from '../Model';\r\nimport './SMPTree.css';\r\n\r\nconst SMPTree: React.FunctionComponent<SMPData> = (smpData: SMPData) => {\r\n    const {\r\n        smp: { name, description, primary_color },\r\n    } = smpData;\r\n    return (\r\n        <>\r\n            <SEO title={name} description={description} themeColor={primary_color} />\r\n            <div className=\"smp-tree-text-wrapper fly-in\">\r\n                <IconText text={name.toUpperCase()} color={primary_color} />\r\n            </div>\r\n            {typeof window !== 'undefined' && (\r\n                <Suspense fallback={null}>\r\n                    <LazyGraph {...smpData} />\r\n                </Suspense>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\n// Takes page query data, pretty wraps it, and then passes it onto the main page\r\nconst SMPTreeWrapper = ({ data }: PageProps) => {\r\n    const {\r\n        smp,\r\n        smp: { characterMetadata, relationships = [] },\r\n    } = data as any;\r\n    if (!relationships) smp.relationships = [];\r\n    const componentProps = useMemo(\r\n        () =>\r\n            ({\r\n                smp,\r\n                characters: characterMetadata\r\n                    .map((cm: CharacterMetadata) => ({ ...cm, ...cm.character }))\r\n                    .map((c: CharacterWithContext) => ({ sort: Math.random(), value: c }))\r\n                    .sort((a: any, b: any) => a.sort - b.sort)\r\n                    .map((a: any) => a.value),\r\n                relationships: relationships ?? [],\r\n            } as SMPData),\r\n        [data]\r\n    );\r\n    return SMPTree(componentProps);\r\n};\r\n\r\n/**\r\n * We use a page query w/ the smp id to grab all the data we'll need to load for this page.\r\n *  1. SMP & SMP Metadata\r\n *  2. Characters (which we'll later filter by ones that have metadata in the SMP)\r\n *  3. Relationships\r\n *\r\n * We'll use distinct queries to grab the following:\r\n *  1. Unique faction types\r\n *  2. Unique relationship types\r\n * Both of these metadata arrays will be returned sorted alphabetically\r\n *\r\n */\r\n\r\nexport const query = graphql`\r\n    query SMPDataQuery($smp_id: Int! = 0) {\r\n        smp: smpData(smp_id: { eq: $smp_id }) {\r\n            description\r\n            max_lives\r\n            name\r\n            primary_color\r\n            secondary_color\r\n            smp_id\r\n            characterMetadata {\r\n                character {\r\n                    uuid\r\n                    socials {\r\n                        youtube\r\n                        twitch\r\n                        reddit\r\n                        instagram\r\n                        twitter\r\n                        tiktok\r\n                    }\r\n                    name\r\n                    ign\r\n                    fields {\r\n                        headSrc\r\n                        bodySrc\r\n                    }\r\n                }\r\n                character_id\r\n                lives\r\n                factions\r\n                quote\r\n                wins\r\n            }\r\n            relationships {\r\n                from_id\r\n                to_id\r\n                type\r\n                note\r\n                season\r\n                part\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default SMPTreeWrapper;\r\n"],"sourceRoot":""}